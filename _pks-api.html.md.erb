Perform the following steps:

1. Click **PKS API**.

1. Navigate to your DNS provider and create an entry that points a fully qualified domain name (FQDN) within your system domain to the public IP address of the load balancer for the PKS API. For example, `api.pks.example.com`. 
  <br><br>
  To retrieve the public IP address of the PKS API load balancer, log in to your IaaS console. If you used Terraform, you can also find the IP address in the `terraform.tfstate` file.

1. Under **Certificate to secure the PKS API**, provide your own certificate and private key pair.
  ![PKS API pane configuration](images/pks-api.png)
  <br>
  The certificate that you supply  should cover the domain that routes to the PKS API VM with TLS termination on the ingress.
  <br><br>
  If you do not have a certificate and private key pair, PKS can generate one for you by performing the following steps.
  <p class="note"><strong>Note</strong>: If you configured Ops Manager Front End without a certificate, 
  you can use this new certificate to complete Ops Manager configuration. To configure your Ops Manager Front End certificate, see <a href="https://docs-pcf-staging.cfapps.io/pcf/om/gcp/prepare-env-manual.html#config-frontend">Configure Front End</a>.
  </p>
  1. Select the **Generate RSA Certificate** link.
  1. Enter the wildcard domain for your API hostname.
    For example, if your PKS API FQDN is `api.pks.example.com`, then enter `*.pks.example.com`.
  1. Click **Generate**.<br>
    ![PKS API certificate generation](images/pks-api-cert-gen.png)
    <p class="note"><strong>Note</strong>: Ops Manager requires a wildcard certificate. If you enter a FQDN when generating the certificate, the PKS installation fails.    </p>
    
1. Under **API Hostname (FQDN)**, enter the FQDN that you have registered to point to the PKS API load balancer, such as `api.pks.example.com`. 
1. Under **Worker VM Max in Flight**, enter the maximum number of non-canary worker instances to create or resize in parallel within an availability zone.
	<br><br>
	This field sets the `max_in_flight` variable, which limits how many instances of a component can start simultaneously when a cluster is created or resized.
	The variable defaults to `1`, which means that only one component starts at a time.
1. Click **Save**.
